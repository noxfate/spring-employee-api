/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0-beta).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.noxzfate.template.springapitemplate.controller.employee.api;

import com.noxzfate.template.springapitemplate.controller.employee.model.Employee;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.math.BigDecimal;
import java.util.List;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-27T00:58:47.636171+07:00[Asia/Bangkok]")
@Validated
@Api(value = "employee", description = "the employee API")
public interface EmployeeApi {

    default EmployeeApiDelegate getDelegate() {
        return new EmployeeApiDelegate() {};
    }

    /**
     * DELETE /employee/{id}
     * Delete employee by ID
     *
     * @param id Unique ID of employee (required)
     * @return No Content (status code 204)
     */
    @ApiOperation(value = "", nickname = "deleteEmployeeId", notes = "Delete employee by ID", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    @RequestMapping(value = "/employee/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteEmployeeId(@ApiParam(value = "Unique ID of employee",required=true) @PathVariable("id") BigDecimal id) {
        return getDelegate().deleteEmployeeId(id);
    }


    /**
     * GET /employee : Get Employee list
     * Get all list of employee available
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Get Employee list", nickname = "getEmployee", notes = "Get all list of employee available", response = Employee.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Employee.class, responseContainer = "List") })
    @RequestMapping(value = "/employee",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Employee>> getEmployee() {
        return getDelegate().getEmployee();
    }


    /**
     * GET /employee/{id} : Your GET endpoint
     * Get one employee detail information by Id
     *
     * @param id Unique ID of employee (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Your GET endpoint", nickname = "getEmployeeId", notes = "Get one employee detail information by Id", response = Employee.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Employee.class),
        @ApiResponse(code = 404, message = "Not Found", response = Employee.class) })
    @RequestMapping(value = "/employee/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Employee> getEmployeeId(@ApiParam(value = "Unique ID of employee",required=true) @PathVariable("id") BigDecimal id) {
        return getDelegate().getEmployeeId(id);
    }


    /**
     * POST /employee : Create new employee
     * Create new employee
     *
     * @param employee Employee object (optional)
     * @return Created (status code 201)
     */
    @ApiOperation(value = "Create new employee", nickname = "postEmployee", notes = "Create new employee", response = Employee.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Employee.class) })
    @RequestMapping(value = "/employee",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Employee> postEmployee(@ApiParam(value = "Employee object"  )  @Valid @RequestBody(required = false) Employee employee) {
        return getDelegate().postEmployee(employee);
    }


    /**
     * PUT /employee/{id}
     * Update employee by ID
     *
     * @param id Unique ID of employee (required)
     * @param employee  (optional)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "", nickname = "putEmployeeId", notes = "Update employee by ID", response = Employee.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Employee.class) })
    @RequestMapping(value = "/employee/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Employee> putEmployeeId(@ApiParam(value = "Unique ID of employee",required=true) @PathVariable("id") BigDecimal id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Employee employee) {
        return getDelegate().putEmployeeId(id, employee);
    }

}
